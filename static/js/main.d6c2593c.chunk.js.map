{"version":3,"sources":["serviceWorker.js","Login.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Login","useState","username","setEmail","className","onSubmit","event","preventDefault","fetch","process","method","mode","cache","credentials","headers","body","JSON","stringify","then","response","json","data","document","cookie","replace","origin","catch","error","console","createAndLoginUser","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","type","value","onChange","e","target","Button","block","disabled","length","App","split","find","row","startsWith","token","jwt","this","getToken","getAccessToken","to","jti","onClick","newGame","access_token","isLogged","Component","Home","path","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+DCdS,SAASC,IAAS,IAAD,EACDC,mBAAS,IADR,mBACvBC,EADuB,KACbC,EADa,KAiC9B,OACE,qBAAKC,UAAU,QAAf,SACE,uBAAMC,SA5BV,SAAsBC,GACpBA,EAAMC,iBAIR,SAA4BL,GAE1BM,MAAMC,+BAAyC,CAC7CC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE,KAAQf,MAE9BgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJC,SAASC,OAAS,gBAAkBF,EAAI,aACxCzB,OAAOC,SAAS2B,QAAQ5B,OAAOC,SAAS4B,OAAS,QAElDC,OAAM,SAACC,GACNC,QAAQD,MAAM,SAAUA,MApB5BE,CAAmB3B,IA0BjB,UACE,eAAC4B,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,QAAvC,UACE,cAACC,EAAA,EAAD,uBACA,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,KAAK,WACLC,MAAOnC,EACPoC,SAAU,SAAAC,GAAC,OAAIpC,EAASoC,EAAEC,OAAOH,aAGrC,cAACI,EAAA,EAAD,CAAQC,OAAK,EAACV,OAAO,QAAQW,WAzC1BzC,EAAS0C,OAAS,GAyCmCR,KAAK,SAA7D,wB,oDCwBOS,E,oKAnEX,WACI,IAKI,OAJoBvB,SAASC,OACxBuB,MAAM,MACNC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAAW,oBAC3BH,MAAM,KAAK,GAElB,SACE,OAAO,Q,sBAIf,SAASI,GACL,OAAa,MAATA,EACOC,YAAID,GACR,O,sBAGX,WACI,IAAIA,EAAQE,KAAKC,SAASD,KAAKE,kBAC/B,OAAa,MAATJ,EAEI,cAAC,IAAD,CAAMK,GAAG,SAAT,mBAKJ,gCACI,0CAAaL,EAAMhD,YACnB,sCAASgD,EAAMM,OACf,cAACf,EAAA,EAAD,CAAQC,OAAK,EAACV,OAAO,QAAQI,KAAK,SAASqB,QAASL,KAAKM,QAAzD,2B,qBAKZ,WACI,IAAIC,EAAeP,KAAKE,iBAExB9C,MAAMC,6BAAuC,CACzCC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAY6C,GAEjC5C,KAAMC,KAAKC,UAAU,CAAE,QAAW,CAACmC,KAAKC,SAASM,GAAd,SAElCzC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFzB,OAAOC,SAAS2B,QAAQ5B,OAAOC,SAAS4B,OAAS,YAEpDC,OAAM,SAACC,GACJC,QAAQD,MAAM,SAAUA,Q,oBAIpC,WACI,OACI,sBAAKvB,UAAU,OAAf,UACI,sCACCgD,KAAKQ,kB,GA/DJC,a,OCGH,SAASC,IACtB,OACE,cAAC,IAAD,UAGI,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,WAUZC,IAASC,OACP,cAACH,EAAD,IACAxC,SAAS4C,eAAe,SHqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6C,a","file":"static/js/main.d6c2593c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./Login.css\";\n\nexport default function Login() {\n  const [username, setEmail] = useState(\"\");\n\n  function validateForm() {\n    return username.length > 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    createAndLoginUser(username);\n  }\n\n  function createAndLoginUser(username) {\n    // create user on api\n    fetch(process.env.REACT_APP_SERVER + 'player', {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ 'name': username })\n    })\n      .then(response => response.json())\n      .then(data => {\n        // add cookie manually\n        document.cookie = \"access_token=\" + data[\"access_token\"];\n        window.location.replace(window.location.origin + \"/\")\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }\n\n  return (\n    <div className=\"Login\">\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"username\" bsSize=\"large\">\n          <ControlLabel>Username</ControlLabel>\n          <FormControl\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={e => setEmail(e.target.value)}\n          />\n        </FormGroup>\n        <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\n          Login\n        </Button>\n      </form>\n    </div>\n  );\n}\n","import jwt from \"jwt-decode\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from \"react-bootstrap\";\n\nclass App extends Component {\n    getAccessToken() {\n        try {\n            const cookieValue = document.cookie\n                .split('; ')\n                .find(row => row.startsWith('access_token='))\n                .split('=')[1];\n            return cookieValue\n        } catch {\n            return null\n        }\n    }\n\n    getToken(token) {\n        if (token != null)\n            return jwt(token)\n        return null\n    }\n\n    isLogged() {\n        let token = this.getToken(this.getAccessToken())\n        if (token == null) {\n            return (\n                <Link to=\"/login\">Login</Link>\n            )\n        }\n\n        return (\n            <div>\n                <h3>Welcome {token.username}</h3>\n                <h3>Id: {token.jti}</h3>\n                <Button block bsSize=\"large\" type=\"submit\" onClick={this.newGame}>New Game</Button>\n            </div>\n        )\n    }\n\n    newGame() {\n        var access_token = this.getAccessToken()\n        debugger;\n        fetch(process.env.REACT_APP_SERVER + 'game', {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + access_token\n            },\n            body: JSON.stringify({ 'players': [this.getToken(access_token)['jti']] })\n        })\n            .then(response => response.json())\n            .then(data => {\n                window.location.replace(window.location.origin + \"/game\")\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"Home\">\n                <h1>Home</h1>\n                {this.isLogged()}\n            </div>\n        );\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Login from \"./Login\";\nimport App from \"./App\";\nimport {BrowserRouter as Router, Switch, Route,} from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n    <Router>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/\">\n            <App />\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n\n// ========================================\n\n\nReactDOM.render(\n  <Home />,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}