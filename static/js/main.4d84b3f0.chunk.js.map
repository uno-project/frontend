{"version":3,"sources":["Login.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","createTheme","SignIn","React","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","onSubmit","event","preventDefault","data","FormData","currentTarget","console","log","email","get","password","noValidate","mt","Grid","container","item","xs","GoogleLogin","size","shape","onSuccess","credentialResponse","onError","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","createElement","Fragment","GoogleOAuthProvider","clientId"],"mappings":"yOAYMA,EAAQC,cAMC,SAASC,IAUtB,OACEC,gBAACC,IAAa,CAACJ,MAAOA,GACpBG,gBAACE,IAAS,CAACC,UAAU,OAAOC,SAAS,MACnCJ,gBAACK,IAAW,MACZL,gBAACM,IAAG,CACFC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,WAGdX,gBAACY,IAAU,CAACT,UAAU,KAAKU,QAAQ,MAAK,iBAGxCb,gBAACM,IAAG,CAACH,UAAU,OAAOW,SAxBT,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAO,IAAIC,SAASH,EAAMI,eAChCC,QAAQC,IAAI,CACVC,MAAOL,EAAKM,IAAI,SAChBC,SAAUP,EAAKM,IAAI,eAmB+BE,YAAU,EAAClB,GAAI,CAAEmB,GAAI,IAEjE1B,gBAAC2B,IAAI,CAACC,WAAS,GACb5B,gBAAC2B,IAAI,CAACE,MAAI,EAACC,IAAE,GAEX9B,gBAAC+B,IAAW,CACVC,KAAK,QACLnC,MAAM,eACNoC,MAAM,cACNC,UAAW,SAAAC,GACTf,QAAQC,IAAIc,IAEdC,QAAS,WACPhB,QAAQC,IAAI,oBAIlBrB,gBAAC2B,IAAI,CAACE,MAAI,SC1DxB,IAYeQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCEDY,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACHtD,IAAAuD,cAACvD,IAAMwD,SAAQ,KACbxD,IAAAuD,cAACE,IAAmB,CAACC,SAAS,4EAC9B1D,IAAAuD,cAACxD,EAAM,SAeXsC","file":"static/js/main.4d84b3f0.chunk.js","sourcesContent":["import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { CredentialResponse, GoogleLogin } from '@react-oauth/google';\n\n\nconst theme = createTheme();\n\nfunction onLogin() {\n  return\n}\n\nexport default function SignIn() {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    console.log({\n      email: data.get('email'),\n      password: data.get('password'),\n    });\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        > \n          <Typography component=\"h1\" variant=\"h5\">\n            Sign In - Uno\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n\n            <Grid container>\n              <Grid item xs>\n\n                <GoogleLogin\n                  size=\"large\"\n                  theme=\"filled_black\"\n                  shape=\"rectangular\"\n                  onSuccess={credentialResponse => {\n                    console.log(credentialResponse);\n                  }}\n                  onError={() => {\n                    console.log('Login Failed')\n                  }}\n                />\n              </Grid>\n              <Grid item>\n\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport SignIn from './Login';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  HashRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\nimport { GoogleOAuthProvider } from '@react-oauth/google';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.Fragment>\n    <GoogleOAuthProvider clientId=\"603017101072-s4cillef8tnvs0nigdr9laqfe505ktns.apps.googleusercontent.com\">\n    <SignIn />\n    {/*\n      <Router >\n        <Routes>\n          <Route path=\"/login/:redirect\" element={<SignIn />} />\n        </Routes>\n      </Router>\n*/}\n    </GoogleOAuthProvider>\n  </React.Fragment>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}